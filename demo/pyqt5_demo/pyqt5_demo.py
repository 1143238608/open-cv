# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'pyqt5_demo'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from Login import *
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtCore import Qt
from InterfaceUi import *
import sys

user_now = ''


class LoginWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_LoginWindow()
        self.ui.setupUi(self)
        # 隐藏外边界
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        # 添加阴影
        self.shadow = QtWidgets.QGraphicsDropShadowEffect(self)
        self.shadow.setOffset(5, 5)
        self.shadow.setBlurRadius(10)
        self.shadow.setColor(Qt.black)
        self.ui.frame.setGraphicsEffect(self.shadow)
        # 登录与注册页面切换
        self.ui.pushButton_Login.clicked.connect(lambda: self.ui.stackedWidget_2.setCurrentIndex(0))
        self.ui.pushButton_Register.clicked.connect(lambda: self.ui.stackedWidget_2.setCurrentIndex(1))
        # 登录成功后跳转到主页面
        self.ui.pushButton_L_sure.clicked.connect(self.login_in)
        # 移动标记
        self.moving = False
        self.show()

    def login_in(self):
        account = self.ui.lineEdit_L_account.text()
        password = self.ui.lineEdit_L_password.text()
        if account == 'admin' and password == '123456':
            self.win = MainWindow()
            self.close()
        else:
            print("wrong!!!")

    # 捕获鼠标按下事件
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.moving = True
            self.offset = event.pos()  # 记录鼠标点击位置（相对于窗口的偏移量）

    # 捕获鼠标移动事件
    def mouseMoveEvent(self, event):
        if self.moving:
            self.move(event.globalPos() - self.offset)  # 根据鼠标移动更新窗口位置

    # 捕获鼠标释放事件
    def mouseReleaseEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.moving = False  # 释放鼠标时停止移动


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        # 隐藏外边界
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        # 添加阴影
        self.shadow = QtWidgets.QGraphicsDropShadowEffect(self)
        self.shadow.setOffset(5, 5)
        self.shadow.setBlurRadius(10)
        self.shadow.setColor(Qt.black)
        self.ui.frame_6.setGraphicsEffect(self.shadow)
        #
        self.ui.pushButton_4.clicked.connect(lambda: self.ui.stackedWidget.setCurrentIndex(0))
        self.ui.pushButton_5.clicked.connect(self.Recommendation)
        self.ui.pushButton_6.clicked.connect(lambda: self.ui.stackedWidget.setCurrentIndex(2))
        self.ui.pushButton_logout.clicked.connect(self.logout)
        # 移动标记
        self.moving = False
        self.show()

    def Recommendation(self):
        self.ui.stackedWidget.setCurrentIndex(1)

    def logout(self):
        global user_now
        self.close()
        self.login = LoginWindow()
        user_now = ''

    # 捕获鼠标按下事件
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.moving = True
            self.offset = event.pos()  # 记录鼠标点击位置（相对于窗口的偏移量）

    # 捕获鼠标移动事件
    def mouseMoveEvent(self, event):
        if self.moving:
            self.move(event.globalPos() - self.offset)  # 根据鼠标移动更新窗口位置

    # 捕获鼠标释放事件
    def mouseReleaseEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.moving = False  # 释放鼠标时停止移动


if __name__ == '__main__':
    app = QApplication(sys.argv)
    win = LoginWindow()
    sys.exit(app.exec())
